#pragma once

#include <stdint.h>

#include "Vec3f.hpp"//our standard vector type

/*!
 * This defines some types we use for the main loop.
 */
struct MainLoopInput {
  float currentTime;  //[s]

  struct {
    float value;  //[V]
    bool updated;
  } batteryVoltage;

  struct {
    Vec3f accelerometer;  //[m/s**2]
    Vec3f rateGyro;  //[rad/s]
    bool updated;
  } imuMeasurement;

  struct {
    float axisLeftVertical;  //no units
    float axisLeftHorizontal;  //no units
    float axisRightVertical;  //no units
    float axisRightHorizontal;  //no units
    bool buttonRed;
    bool buttonGreen;
    bool buttonBlue;
    bool buttonYellow;
    bool buttonStart;
    bool buttonSelect;
    bool updated;
  } joystickInput;

  struct {
    float value_x; //[rad/s]
    float value_y; //[rad/s]
    bool updated;
  } opticalFlowSensor;

  struct {
    float value;  //[m]
    bool updated;
  } heightSensor;

  struct {
    //You probably don't need to access these, but we're providing them
    float imu_temperature; //[deg C] (provided for debugging purposes)
    //Magnetometer info
    //Barometer info
  } extra;

};

struct MainLoopOutput {
  int motorCommand1;  // located at body +x +y
  int motorCommand2;  // located at body +x -y
  int motorCommand3;  // located at body -x -y
  int motorCommand4;  // located at body -x +y

  //variables that are only used for telemetry:
  float telemetryOutputs_plusMinus100[12];  // NOTE! These are bounded to be in +/- 100
};

#include "UtilityFunctions.hpp"

int pwmCommandFromSpeed(float desiredSpeed_rad_per_sec) {
  // Replace these two coefficients with what you get
  // in the experiment. Note the trailing "f" after the
  // number -- this ensures that we use single precision
  // floating point (rather than double precision, which
  // would be substantially slower on the microcontroller).
  float a = -82.44f;  // the zeroth order term
  float b = 0.1336f;  // the first order term

  return int((desiredSpeed_rad_per_sec*b + a));
}

float speedFromForce(float desiredForce_N) {
  // replace this with your determined constant:
  // Remember to add the trailing "f" for single
  // precision!
  //From lab 2, our prop constance of 2*10-8
  float const propConstant = 2.0e-08f;

  //we implement a safety check,
  //  (no sqrtf for negative numbers)
  if (desiredForce_N <= 0) {
    return 0.0f;
  }

  return sqrtf(desiredForce_N / propConstant);
}

#include "UserCode.hpp"
#include "UtilityFunctions.hpp"
#include "Vec3f.hpp"

#include <stdio.h> //for printf
#include <cmath>

//An example of a variable that persists beyond the function call.
float exampleVariable_float = 0.0f;  //Note the trailing 'f' in the number. This is to force single precision floating point.
Vec3f exampleVariable_Vec3f = Vec3f(0, 0, 0);
int exampleVariable_int = 0;

//We keep the last inputs and outputs around for debugging:
MainLoopInput lastMainLoopInputs;
MainLoopOutput lastMainLoopOutputs;

//Some constants that we may use:
const float mass = 30e-3f;  // mass of the quadcopter [kg]
const float gravity = 9.81f;  // acceleration of gravity [m/s^2]
const float inertia_xx = 16e-6f;  //MMOI about x axis [kg.m^2]
const float inertia_yy = inertia_xx;  //MMOI about y axis [kg.m^2]
const float inertia_zz = 29e-6f;  //MMOI about z axis [kg.m^2]

const float dt = 1.0f / 500.0f; //[s] period between successive calls to MainLoop


//∗Outside∗ the main function:
float estRoll = 0.0f;
float estPitch = 0.0f;
float estYaw= 0.0f;
float rho = 0.01f;
float pitch_mean;
float roll_mean;
float pitch_corrected = 0.0f;
float roll_corrected = 0.0f;

//*Before* MainLoop
Vec3f estGyroBias = Vec3f(0.0f, 0.0f, 0.0f);

//lab 4
//defining input for lab experiment
//float desNormalizedAcceleration = 8.0f;
//Vec3f ang_acc = Vec3f(0.0f,0.0f,0.0f);
Vec3f ang_vel = Vec3f(0.0f,0.0f,0.0f);
Vec3f ang_angle = Vec3f(0.0f,0.0f,0.0f);
float n1;
float n2;
float n3;
float cp1;
float cp2;
float cp3;
float cp4;
float l_b = 33.0e-3f;
float k_b = 0.01f;
float c_t;

float mdebug1, mdebug2, mdebug3, mdebug4, mdebug5;

float pwm1,pwm2,pwm3,pwm4;

Vec3f cmd_ang_acc;
Vec3f cmd_ang_vel;
Vec3f rateGyro_corr;

//define new variables
float estHeight = 0.0f;
float estVelocity_1 = 0.0f;
float estVelocity_2 = 0.0f;
float estVelocity_3 = 0.0f;
float lastHeightMeas_meas = 0.0f;
float lastHeightMeas_time = 0.0f;

//lab4
float const timeConstant_rollRate = 0.04f; //Changed
float const timeConstant_pitchRate = timeConstant_rollRate;
float const timeConstant_yawRate = 0.5f; //Changed

float const timeConstant_rollAngle = 0.4f; //Changed - original 0.04
float const timeConstant_pitchAngle = timeConstant_rollAngle;
float const timeConstant_yawAngle = 1.0f; // changed - original 0.25

  //lab 5
float const timeConst_horizVel = 2.0f; //changed from 2

const float natFreq_height = 2.0f;
const float dampingRatio_height = 0.7f;

float kp = 0.5f;  // Proportional gain
float ki = 0.1f;  // Integral gain
float kd = 0.01f; // Derivative gain

float integralErrorX = 0.0f;
float integralErrorY = 0.0f;
float previousErrorX = 0.0f;
float previousErrorY = 0.0f;

MainLoopOutput MainLoop(MainLoopInput const &in) {
    MainLoopOutput outVals;

    // Bias correction for gyro
    if (in.currentTime < 1.0f) {
        estGyroBias = estGyroBias + (in.imuMeasurement.rateGyro / 500.0f);
    }
    rateGyro_corr = in.imuMeasurement.rateGyro - estGyroBias;

    // Estimate roll, pitch, yaw angles
    estRoll = (1 - rho) * (estRoll + rateGyro_corr.x * dt) + rho * (float(in.imuMeasurement.accelerometer.y) / gravity);
    estPitch = (1 - rho) * (estPitch + rateGyro_corr.y * dt) + rho * (float(in.imuMeasurement.accelerometer.x) / gravity);
    estYaw = estYaw + rateGyro_corr.z * dt;

    // Height and vertical velocity estimation
    estHeight = estHeight + estVelocity_3 * dt;
    estVelocity_3 = estVelocity_3; // Assume constant for simplicity

    if (in.heightSensor.updated && in.heightSensor.value < 5.0f) {
        float hMeas = in.heightSensor.value * cosf(estRoll) * cosf(estPitch);
        estHeight = (1.0f - mixHeight) * estHeight + mixHeight * hMeas;
        float v3Meas = (hMeas - lastHeightMeas_meas) / (in.currentTime - lastHeightMeas_time);
        estVelocity_3 = (1.0f - mixHeight) * estVelocity_3 + mixHeight * v3Meas;
        lastHeightMeas_meas = hMeas;
        lastHeightMeas_time = in.currentTime;
    }

    // Horizontal velocity estimation with optical flow
    if (in.opticalFlowSensor.updated) {
        float sigma_1 = in.opticalFlowSensor.value_x;
        float sigma_2 = in.opticalFlowSensor.value_y;
        float div = cosf(estRoll) * cosf(estPitch);

        if (div > 0.5f) {
            float deltaPredict = estHeight / div;
            float v1Meas = (-sigma_1 + in.imuMeasurement.rateGyro.y) * deltaPredict;
            float v2Meas = (-sigma_2 - in.imuMeasurement.rateGyro.x) * deltaPredict;

            estVelocity_1 = (1.0f - mixHorizVel) * estVelocity_1 + mixHorizVel * v1Meas;
            estVelocity_2 = (1.0f - mixHorizVel) * estVelocity_2 + mixHorizVel * v2Meas;
        }
    }

    // PID controller for drift compensation
    float errorX = -estVelocity_1; // Desired velocity is 0
    float errorY = -estVelocity_2; // Desired velocity is 0

    integralErrorX += errorX * dt;
    integralErrorY += errorY * dt;

    float derivativeErrorX = (errorX - previousErrorX) / dt;
    float derivativeErrorY = (errorY - previousErrorY) / dt;

    previousErrorX = errorX;
    previousErrorY = errorY;

    float correctionX = kp * errorX + ki * integralErrorX + kd * derivativeErrorX;
    float correctionY = kp * errorY + ki * integralErrorY + kd * derivativeErrorY;

    // Adjust desired roll and pitch angles based on drift correction
    float desRoll = correctionY / gravity;
    float desPitch = -correctionX / gravity;
    float desYaw = 0.0f; // Maintain stable yaw

    // Height control
    float desHeight = 0.5f;
    float desAcc3 = -2 * dampingRatio_height * natFreq_height * estVelocity_3 -
                    natFreq_height * natFreq_height * (estHeight - desHeight);
    float desNormalizedAcceleration = (gravity + desAcc3) / (cosf(estRoll) * cosf(estPitch));

    // Control motor commands
    c_t = desNormalizedAcceleration * mass;
    cmd_ang_vel.x = -(1 / timeConstant_rollAngle) * (estRoll - desRoll);
    cmd_ang_vel.y = -(1 / timeConstant_pitchAngle) * (estPitch - desPitch);
    cmd_ang_vel.z = -(1 / timeConstant_yawAngle) * (estYaw - desYaw);

    cmd_ang_acc.x = -(1 / timeConstant_rollRate) * (rateGyro_corr.x - cmd_ang_vel.x);
    cmd_ang_acc.y = -(1 / timeConstant_pitchRate) * (rateGyro_corr.y - cmd_ang_vel.y);
    cmd_ang_acc.z = -(1 / timeConstant_yawRate) * (rateGyro_corr.z - cmd_ang_vel.z);

    // Compute forces
    n1 = inertia_xx * cmd_ang_acc.x;
    n2 = inertia_yy * cmd_ang_acc.y;
    n3 = inertia_zz * cmd_ang_acc.z;

    cp1 = (1.0f / 4.0f) * (c_t + n1 / l_b - n2 / l_b + n3 / k_b);
    cp2 = (1.0f / 4.0f) * (c_t - n1 / l_b - n2 / l_b - n3 / k_b);
    cp3 = (1.0f / 4.0f) * (c_t - n1 / l_b + n2 / l_b + n3 / k_b);
    cp4 = (1.0f / 4.0f) * (c_t + n1 / l_b + n2 / l_b - n3 / k_b);

    pwm1 = pwmCommandFromSpeed(speedFromForce(cp1));
    pwm2 = pwmCommandFromSpeed(speedFromForce(cp2));
    pwm3 = pwmCommandFromSpeed(speedFromForce(cp3));
    pwm4 = pwmCommandFromSpeed(speedFromForce(cp4));

    outVals.motorCommand1 = pwm1;
    outVals.motorCommand2 = pwm2;
    outVals.motorCommand3 = pwm3;
    outVals.motorCommand4 = pwm4;

  return outVals;
}


void PrintStatus() {//accelerometer
  //checking
  printf("Debugs: %6.3f,%6.3f,%6.3f,%6.3f,%6.3f\n", double(mdebug1), double(mdebug2), double(mdebug3), double(mdebug4), double(mdebug5));

  printf("Checking ");
  //printf("total thrust =%6.3f, ", float (lastMainLoopOutputs.desNormalizedAcceleration));
  printf("cp1 =%6.3f, ", double (cp1));
  printf("ct =%6.3f, ", double (c_t));
  printf("\n"); //new line

  printf("Last range = %6.3fm,",\
         double(lastMainLoopInputs.heightSensor.value));
  printf("Last flow: x=%6.3f, y=%6.3f\n",\
         double(lastMainLoopInputs.opticalFlowSensor.value_x),\
         double(lastMainLoopInputs.opticalFlowSensor.value_y));
  printf("estHeight = %6.3fm\n",\
         double(lastMainLoopOutputs.telemetryOutputs_plusMinus100[1]));
  printf("heightSensor_value = %6.3fm\n",\
         double(lastMainLoopInputs.heightSensor.value));
  printf("height sensor updated = %6.3fm\n",\
         double(lastMainLoopInputs.heightSensor.updated));
  printf("current time = %6.3fm\n",\
         double(lastMainLoopInputs.currentTime));
}
